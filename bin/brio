#!/usr/bin/env ruby
require 'gli'
require 'highline/import'
require 'launchy'
require 'brio'

include GLI::App

program_desc 'command line client for app.net inspired by t for twitter'

version Brio::VERSION

client = Brio::Client.new

output_formats = {
  'csv'       => Brio::Format::CSV.new,
  'condensed' => Brio::Format::Condensed.new,
  'pretty'    => Brio::Format::Pretty.new
}

desc "Read Terms of Service and Privacy Policy."
skips_pre
command :tos do |c|
  c.action do |global_options,options,args|
    formatter = output_formats['pretty']
    formatter.set_wrap
    say <<-END
************* TERMS OF SERVICE ***********

By using this software you agree that in no event shall the authors or copyright holders be liable for any claim, 
damages or other liability, whether in an action of contract, tort or otherwise, 
arising from, out of or in connection with the software or the use or other dealings in the software.

Ok, in plain wrods this means that I am not responible for anything that happens to you while using this software.

************* PRIVACY POLICY *************
This software does not store any infromation about you that is not essential for running it.
It creates a file called .brio.rc that stores your authorization token inside your $HOME directory. And that is it.
END
  end
end


desc 'Optional. Format of the output (default: pretty for TTY, csv otherwise)'
arg_name 'csv|condensed|pretty'
flag :format

desc 'authorize brio with app.net'
skips_pre
command :authorize do |c|
  c.action do |global_options,options,args|

    if client.config.empty?
      say "Welcome! Before you can use *brio* you need to authorize it with app.net"
      ask "Press [Enter] to open the app.net site."
      say ""

      Launchy.open client.oauth_url
      token = ask "Enter your oauth token:"

      client.config['token'] = token.to_s
      say "<%= color('Authorization successful.', :green) %>"
    else
      say "<%= color('You already authorized with app.net', :red) %>"
    end

  end
end

desc "Retrives Posts in the stream. Defaults to user's stream"
command :stream do |c|
  c.desc 'Retrives Posts from the global stream.'
  c.switch [:g, :global]

  c.desc 'The number of latest Posts to return, up to a maximum of 200'
  c.default_value '20'
  c.flag [:c, :count]

  c.action do |global_options,options,args|
    formatter = output_formats[global_options[:format]]
    formatter.set_wrap
    params = {count: options[:c].to_i, include_deleted: 0}
    if options[:global]
      posts = client.get_post_stream_global params
    else
       posts = client.get_post_stream params
    end
    formatter.print_posts posts
  end
end

#default_desc "Post a message."
desc 'Make a new Post to appdotnet. Delete a post. Reply to a post.. see `brio help post` for more.'
arg_name 'message'
command :post do |c|
  c.default_desc "Make a new Post to appdotnet"
  c.action do |global_options,options,args|
    if args.empty?
      message = ask "Whats on your mind:"
    else
      message = args[0]
    end
    help_now!('message is required') if message.empty?
    post =  client.create_post text: message
    say "<%= color(\"#{post.text}\", :red) %>" if post.is_a? Brio::Resources::NullResource
  end

  c.desc 'Reply to a post'
  c.arg_name 'postID message'
  c.command :reply do |reply|
    reply.action do |global_options,options,args|
      help_now!('postID and message are both required') if args.empty?
      if args.size == 1
        message = ask "Your reply:"
      else
        message = args[1]
      end
      help_now!('postID and message are both required') if message.empty?
      post =  client.create_post reply_to: args[0], text: message
      say "<%= color(\"#{post.text}\", :red) %>" if post.is_a? Brio::Resources::NullResource
    end
  end

  c.desc 'Delete a post (only if created by you)'
  c.arg_name 'postID'
  c.command :delete do |delete|
    delete.action do |global_options,options,args|
      help_now!('postID is required') if args.empty?
      post = client.delete_post args[0]
      say "<%= color(\"#{post.text}\", :red) %>" if post.is_a? Brio::Resources::NullResource
    end
  end

  c.desc 'Delete a starred post or a repost.'
  c.switch [:rm]

  c.desc 'Repost a post'
  c.arg_name 'postID'
  c.command :repost do |repost|
    repost.action do |global_options,options,args|
      help_now!('postID is required') if args.empty?
      if options[:rm]
        post = client.delete_post_repost args[0]
      else
        post = client.create_post_repost args[0]
      end
      say "<%= color(\"#{post.text}\", :red) %>" if post.is_a? Brio::Resources::NullResource
    end
  end

  c.desc 'Star a post'
  c.arg_name 'postID'
  c.command :star do |star|
    star.action do |global_options,options,args|
      help_now!('postID is required') if args.empty?
      if options[:rm]
        post = client.delete_post_star args[0]
      else
        post = client.create_post_star args[0]
      end
      say "<%= color(\"#{post.text}\", :red) %>" if post.is_a? Brio::Resources::NullResource
    end
  end

end

desc 'Look up a user. If no argument is provided, it defualts to the current authenticated user'
default_value 'me'
arg_name '@username', :optional
command :whois do |c|
  #do not forget to attach @
  c.action do |global_options,options,args|
    exit_now!('username must start with @') if !args.empty? and !args[0].start_with?('@')
    formatter = output_formats[global_options[:format]]
    formatter.set_wrap
    user = client.get_user (args[0] || 'me')
    formatter.print_user user
  end
end


desc 'Follow a user'
arg_name '@username', :multiple
command :follow do |c|
  c.action do |global_options,options,args|
    help_now!('username is required') if args.empty?
    exit_now!('username must start with @') if !args.empty? and !args[0].start_with?('@')
    user = client.create_user_follow args[0]
    say "<%= color(\"#{user.text}\", :red) %>" if user.is_a? Brio::Resources::NullResource
  end
end

desc 'Unfollow a user'
arg_name '@username', :multiple
command :unfollow do |c|
  c.action do |global_options,options,args|
    help_now!('username is required') if args.empty?
    exit_now!('username must start with @') if !args.empty? and !args[0].start_with?('@')
    user = client.delete_user_follow args[0]
    say "<%= color(\"#{user.text}\", :red) %>" if user.is_a? Brio::Resources::NullResource
  end
end

desc 'List various resources. Followers, Mentions, .. run `brio help list` for more.'
command :list do |c|
  c.desc 'The number of listings to return, up to a maximum of 200'
  c.default_value '20'
  c.flag [:c, :count]

  c.desc 'List the posts where the user is mentioned. It defualts to the current authenticated user'
  c.default_value 'me'
  c.arg_name '@username', :optional
  c.command :mentions do |m|
    m.action do |global_options,options,args|
      exit_now!('username must start with @') if !args.empty? and !args[0].start_with?('@')
      formatter = output_formats[global_options[:format]]
      formatter.set_wrap
      params = {count: options[:c].to_i, include_deleted: 0}
      posts = client.get_user_mentions args[0], params
      formatter.print_posts posts
    end
  end

  c.desc 'List all accounts that a user is following. It defualts to the current authenticated user'
  c.default_value 'me'
  c.arg_name '@username', :optional
  c.command :following do |f|
    f.action do |global_options,options,args|
      exit_now!('username must start with @') if !args.empty? and !args[0].start_with?('@')
      formatter = output_formats[global_options[:format]]
      formatter.set_wrap
      params = {count: options[:c].to_i}
      users = client.get_user_following args[0], params
      formatter.print_users users
    end
  end

  c.desc 'list all accounts that are following a user - it defualts to the current authenticated user'
  c.default_value 'me'
  c.arg_name '@username', :optional
  c.command :followers do |f|
    f.action do |global_options,options,args|
      exit_now!('username must start with @') if !args.empty? and !args[0].start_with?('@')
      formatter = output_formats[global_options[:format]]
      formatter.set_wrap
      params = {count: options[:c].to_i}
      users = client.get_user_followers args[0], params
      formatter.print_users users
    end
  end

  c.desc 'list replies to a post'
  c.arg_name 'postID'
  c.command :replies do |f|
    f.action do |global_options,options,args|
      help_now!('postID is required') if args.empty?
      formatter = output_formats[global_options[:format]]
      formatter.set_wrap
      params = {count: options[:c].to_i, include_deleted: 0}
      posts = client.get_post_replies args[0], params
      formatter.print_posts posts
    end
  end

  c.desc 'list posts for a user. Defaults to the current authenticated user'
  c.arg_name '@username', :optional
  c.command :posts do |f|
    f.action do |global_options,options,args|
      exit_now!('username must start with @') if !args.empty? and !args[0].start_with?('@')
      formatter = output_formats[global_options[:format]]
      formatter.set_wrap
      params = {count: options[:c].to_i, include_deleted: 0}
      posts = client.get_user_posts args[0], params
      formatter.print_posts posts
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  exit_now!('You need to authorize with app.net. Run `brio authorize` to do so.') if client.config.empty? 
  if global[:format].nil?
    if STDOUT.tty? 
      global[:format] = 'pretty'
    else
      global[:format] = 'csv'
    end
  end
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
  $terminal.wrap_at = :auto
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
